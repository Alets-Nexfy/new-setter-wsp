import { SupabaseService } from '../src/core/services/SupabaseService'
import * as dotenv from 'dotenv'
import { v4 as uuidv4 } from 'uuid'

dotenv.config()

async function testWhatsAppFlow() {
  console.log('üß™ Testing Complete WhatsApp Flow with Supabase\n')
  
  const supabaseService = SupabaseService.getInstance()
  await supabaseService.initialize()
  
  const client = supabaseService.getAdminClient()
  
  try {
    // 1. Create a test user
    const testUserId = uuidv4()
    const testEmail = `test_${Date.now()}@example.com`
    
    console.log('1Ô∏è‚É£ Creating test user...')
    const { data: user, error: userError } = await client
      .from('users')
      .insert({
        id: testUserId,
        email: testEmail,
        full_name: 'Test WhatsApp User',
        username: `testuser_${Date.now()}`,
        whatsapp_number: '+5493425123456',
        is_active: true
      })
      .select()
      .single()
    
    if (userError) {
      console.error('‚ùå User creation failed:', userError)
      return
    }
    
    console.log('‚úÖ User created:', user.email)
    
    // 2. Create a WhatsApp session
    console.log('\n2Ô∏è‚É£ Creating WhatsApp session...')
    const sessionId = uuidv4()
    const { data: session, error: sessionError } = await client
      .from('sessions')
      .insert({
        id: sessionId,
        user_id: testUserId,
        platform: 'whatsapp',
        status: 'connected',
        qr_code: 'test-qr-code',
        metadata: {
          phoneNumber: '+5493425123456',
          deviceId: 'test-device'
        }
      })
      .select()
      .single()
    
    if (sessionError) {
      console.error('‚ùå Session creation failed:', sessionError)
      return
    }
    
    console.log('‚úÖ Session created:', session.id)
    
    // 3. Create a chat
    console.log('\n3Ô∏è‚É£ Creating chat...')
    const chatId = uuidv4()
    const { data: chat, error: chatError } = await client
      .from('chats')
      .insert({
        id: chatId,
        user_id: testUserId,
        session_id: sessionId,
        platform: 'whatsapp',
        contact_identifier: '+5493425987654',
        metadata: {
          name: 'Test Contact',
          phoneNumber: '+5493425987654'
        },
        human_present: false,
        auto_agent_paused: false
      })
      .select()
      .single()
    
    if (chatError) {
      console.error('‚ùå Chat creation failed:', chatError)
      return
    }
    
    console.log('‚úÖ Chat created:', chat.contact_identifier)
    
    // 4. Send a message
    console.log('\n4Ô∏è‚É£ Sending message...')
    const messageId = uuidv4()
    const { data: message, error: messageError } = await client
      .from('messages')
      .insert({
        id: messageId,
        chat_id: chatId,
        user_id: testUserId,
        platform: 'whatsapp',
        content: 'Hello from Supabase test!',
        type: 'text',
        direction: 'outgoing',
        status: 'sent'
      })
      .select()
      .single()
    
    if (messageError) {
      console.error('‚ùå Message creation failed:', messageError)
      return
    }
    
    console.log('‚úÖ Message sent:', message.content)
    
    // 5. Test human presence detection
    console.log('\n5Ô∏è‚É£ Testing human presence...')
    const { data: presenceResult, error: presenceError } = await client
      .rpc('is_human_present_in_chat', { chat_uuid: chatId })
    
    if (presenceError) {
      console.error('‚ùå Presence check failed:', presenceError)
    } else {
      console.log('‚úÖ Human presence status:', presenceResult)
    }
    
    // 6. Update human presence
    console.log('\n6Ô∏è‚É£ Simulating human activity...')
    const { error: updateError } = await client
      .rpc('update_human_presence', {
        p_user_id: testUserId,
        p_chat_id: chatId,
        p_is_present: true
      })
    
    if (updateError) {
      console.error('‚ùå Presence update failed:', updateError)
    } else {
      console.log('‚úÖ Human presence updated')
    }
    
    // 7. Get statistics
    console.log('\n7Ô∏è‚É£ Getting user statistics...')
    const { data: stats, error: statsError } = await client
      .from('messages')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', testUserId)
    
    console.log('‚úÖ Total messages for user:', stats || 0)
    
    // 8. Test chat listing
    console.log('\n8Ô∏è‚É£ Listing user chats...')
    const { data: chats, error: chatsError } = await client
      .from('chats')
      .select('*')
      .eq('user_id', testUserId)
      .eq('platform', 'whatsapp')
    
    if (chatsError) {
      console.error('‚ùå Chat listing failed:', chatsError)
    } else {
      console.log('‚úÖ User has', chats.length, 'WhatsApp chats')
    }
    
    // 9. Clean up test data
    console.log('\n9Ô∏è‚É£ Cleaning up test data...')
    
    // Delete in order due to foreign keys
    await client.from('messages').delete().eq('chat_id', chatId)
    await client.from('chats').delete().eq('id', chatId)
    await client.from('sessions').delete().eq('id', sessionId)
    await client.from('users').delete().eq('id', testUserId)
    
    console.log('‚úÖ Test data cleaned up')
    
    console.log('\nüéâ WHATSAPP FLOW TEST COMPLETED SUCCESSFULLY!')
    console.log('\nüìä Summary:')
    console.log('‚úÖ Supabase connection working')
    console.log('‚úÖ User creation working')
    console.log('‚úÖ Session management working')
    console.log('‚úÖ Chat creation working')
    console.log('‚úÖ Message sending working')
    console.log('‚úÖ Human presence detection working')
    console.log('‚úÖ Platform isolation (WhatsApp) working')
    console.log('‚úÖ Data queries working')
    console.log('‚úÖ Cleanup working')
    
  } catch (error) {
    console.error('üí• Test failed:', error)
  }
}

testWhatsAppFlow().catch(console.error)